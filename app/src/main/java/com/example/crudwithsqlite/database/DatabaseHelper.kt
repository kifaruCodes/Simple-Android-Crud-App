package com.example.crudwithsqlite.database

import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import com.example.crudwithsqlite.model.TaskListModel

class DatabaseHelper(context: Context) : SQLiteOpenHelper(context, DB_NAME, null, DB_VERSION) {

    companion object{
        // database name and details
        private val DB_NAME = "task"
        private val DB_VERSION = 1

        // table name
        private val TABLE_NAME = "tasklist"

        // table columns
        private val ID = "id"
        private val TASK_NAME = "taskname"
        private val TASK_DETAILS = "taskdetails"
    }

    // this method will be executed when the DatabaseHelper class is called
    override fun onCreate(p0: SQLiteDatabase?) {
        // write the query of creating our table
        val CREATE_TABLE = "CREATE TABLE $TABLE_NAME ($ID INTEGER PRIMARY KEY, $TASK_NAME TEXT, $TASK_DETAILS TEXT);"

        // execute our query
        // the "?" in p0?.execSQL() is a nullable safe
        p0?.execSQL(CREATE_TABLE)
    }

    // this method will drop the table in the event it is already in the database
    override fun onUpgrade(p0: SQLiteDatabase?, p1: Int, p2: Int) {
        // write the drop table query
        val DROP_TABLE = "DROP TABLE IF EXISTS $TABLE_NAME"
        // execute the drop table query
        p0?.execSQL(DROP_TABLE)
        // run the onCreate() method the creates the table again
        onCreate(p0)
    }

    /*
    *   CRUD Methods start here
    *
    *   C - addTask()
    *   R - getAllTask(), getTask(_id)
    *   U - updateTask()
    *   D - deleteTask(_id)
    *
    *
    * */

    // Read Method, extends the TaskListModel class (in the model package)
    fun getAllTask() : List<TaskListModel> {
        val taskList = ArrayList<TaskListModel>()
        val db = writableDatabase
        val selectQuery = "SELECT * FROM $TABLE_NAME"
        val cursor = db.rawQuery(selectQuery, null)
        if (cursor != null){
            // go to first dataset
            if (cursor.moveToFirst()){
                // loop through all the rows in the table, adding them to the taskList arraylist
                do {
                    val tasks = TaskListModel()
                    tasks.id = Integer.parseInt(cursor.getString(cursor.getColumnIndex(ID)))
                    tasks.name = cursor.getString(cursor.getColumnIndex(TASK_NAME))
                    tasks.details = cursor.getString(cursor.getColumnIndex(TASK_DETAILS))

                    // add to arral list for each dataset
                    taskList.add(tasks)
                } while (cursor.moveToNext()) // move to the next row after adding the columns to the array
            }

        }
        // close the cursor
        cursor.close()

        // return the arraylist with the table data
        return taskList
    }

    // Add method. takes TaskListModel class as an argument,
    // then returns boolean (true/false) ie if data is added or not
    fun addTask(tasks : TaskListModel) : Boolean {
        // create database object in writeable format
        val db = this.writableDatabase

        val values = ContentValues()

        // add the columns except id, as it is autogenerated and a primary key
        values.put(TASK_NAME, tasks.name)
        values.put(TASK_DETAILS, tasks.details)

        // execute insert
        val _success = db.insert(TABLE_NAME, null, values)

        // close database
        db.close()

        // Check whether data is inserted or not
        return (Integer.parseInt("$_success") != -1)
    }

    // get data of particular id
    fun getTask(_id : Int) : TaskListModel {
        val tasks = TaskListModel()
        val db = writableDatabase

        val selectQuery = "SELECT * FROM $TABLE_NAME WHERE ID = $_id"
        val cursor = db.rawQuery(selectQuery, null)

        cursor?.moveToFirst()
        tasks.id = Integer.parseInt(cursor.getString(cursor.getColumnIndex(ID)))
        tasks.name = cursor.getString(cursor.getColumnIndex(TASK_NAME))
        tasks.details = cursor.getString(cursor.getColumnIndex(TASK_DETAILS))
        cursor.close()

        return tasks
    }

    // delete a task
    fun deleteTask(_id : Int) : Boolean {
        val db = this.writableDatabase
        val _success = db.delete(TABLE_NAME, ID + "=?", arrayOf(_id.toString())).toLong()
        db.close()
        return Integer.parseInt("$_success") != 1
    }

    // update task
    fun updateTask(tasks: TaskListModel) : Boolean {
        val db = this.writableDatabase
        val values = ContentValues()
        values.put(TASK_NAME, tasks.name)
        values.put(TASK_DETAILS, tasks.details)
        val _success = db.update(TABLE_NAME, values, ID + "=?", arrayOf(tasks.id.toString())).toLong()
        db.close()
        return  Integer.parseInt("$_success") != -1
    }
}